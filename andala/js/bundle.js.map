{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/js/app.js","webpack:///./lib/js/canvas.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;ACnEA;AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;;;;;;ACpBD;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAA0B,6BAA6B;AACvD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,UAAU,mBAAmB;AAC7B;AACA;AACA,UAAU,mBAAmB;AAC7B;AACA;AACA,UAAU,mBAAmB;AAC7B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL,YAAY;AACZ;;;AAGA;;AAEA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./lib/js/app.js\");\n","// import Grid from './grid';\nimport Canvas from './canvas';\n// import * as userInputs from './user_inputs';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  // const grid = new Grid();\n  // grid.buildGrid();\n\n  const canvas = new Canvas('andala-canvas');\n\n  //TODO: call an instance of UserInput class and pass in canvas instance\n  // created above that can be acted on\n  \n  // const user = new User(canvas)\n  // in user constructor: this.canvas = canvas;\n  // canvas.userInputs.setUserInputListeners();\n  // userInputs.setPenColorsListener();\n  // const toggleUserInputs = new userInputs();\n  // canvas.setupCanvas();\n\n});\n","// import * as userInputs from './user_inputs';\n\nclass Canvas {\n  constructor(id){\n    this.canvasElement = document.getElementById(id);\n    this.ctx = this.canvasElement.getContext('2d');\n    this.canvasLeftSide = () => this.getCanvasCoords()[0];\n    this.canvasTop = () => this.getCanvasCoords()[1];\n\n\n    this.axisPoint = [(this.canvasElement.width) / 2, (this.canvasElement.height) / 2];\n    this.symDirection = document.querySelector('.symmetry-selected').dataset.symmetry;\n    this.radialOrder = parseInt(document.getElementById('radial-order').value);\n\n    this.startCoordinates = [];\n    this.nextCoordinates = [];\n    this.drawing = false;\n    this.lineWidth = parseInt(document.querySelector('.brush-size-selected').dataset.brushsize);\n    this.strokeStyle = document.querySelector('.drawing-color-selected').dataset.color;\n\n    this.determineDraw = this.determineDraw.bind(this);\n    // userInputs.toggleBrushColor = userInputs.toggleBrushColor.bind(this);\n    //why was this yelling at me?\n    //canvas.js:20 Uncaught TypeError: Cannot set property 'toggleBrushColor' of undefined\n    // at new Canvas (canvas.js:20)\n\n    this.toggleBrushColor = this.toggleBrushColor.bind(this);\n    this.toggleCanvasBackground = this.toggleCanvasBackground.bind(this);\n    this.toggleBrushSize = this.toggleBrushSize.bind(this);\n    this.toggleSymmetryChoice = this.toggleSymmetryChoice.bind(this);\n    this.changeRadialOrder = this.changeRadialOrder.bind(this);\n    this.clearCanvas = this.clearCanvas.bind(this);\n\n    this.canvasElement.addEventListener('mousedown', (e) => this.setDrawingParameters('DOWN', e));\n    this.canvasElement.addEventListener('mouseup', (e) => this.setDrawingParameters('UP', e));\n    this.canvasElement.addEventListener('mouseleave', (e) => this.setDrawingParameters('OUT', e));\n    this.canvasElement.addEventListener('mousemove', this.determineDraw);\n\n    // userInputs.setUserInputListeners();\n    this.setUserInputListeners();\n\n  }\n\n  getCanvasCoords(){\n    const canvasPosition = this.canvasElement.getBoundingClientRect();\n    const canvasLeft = canvasPosition.left + window.scrollX;\n    const canvasTop = canvasPosition.top + window.scrollY;\n    return [canvasLeft, canvasTop];\n  }\n\n  setUserInputListeners(){\n    const brushColors = document.querySelector('.brush-colors');\n    brushColors.addEventListener(\"click\", this.toggleBrushColor);\n\n    const canvasBackgrounds = document.querySelector('.canvas-backgrounds');\n    canvasBackgrounds.addEventListener(\"click\", this.toggleCanvasBackground);\n\n    const brushSizes = document.querySelector('.brush-sizes');\n    brushSizes.addEventListener(\"click\", this.toggleBrushSize);\n\n    const symmetryChoices = document.querySelector('.symmetry-choices');\n    symmetryChoices.addEventListener(\"click\", this.toggleSymmetryChoice);\n\n    const radialOrder = document.getElementById('radial-order');\n    radialOrder.addEventListener(\"input\", this.changeRadialOrder);\n\n    const clearCanvasButton = document.getElementById('canvas-reset-button');\n    clearCanvasButton.addEventListener(\"click\", this.clearCanvas);\n\n  }\n\n  toggleBrushColor(e){\n    const previousBrush = document.querySelector('.drawing-color-selected');\n    previousBrush.className = \"\";\n    e.target.className = 'drawing-color-selected';\n    this.strokeStyle = e.target.dataset.color;\n  }\n\n  toggleCanvasBackground(e){\n    const previousBackground = document.querySelector('.canvas-background-selected');\n    previousBackground.className = \"\";\n    e.target.className = 'canvas-background-selected';\n    this.canvasElement.setAttribute('style',\n      `background-color:${e.target.dataset.background};`)\n  }\n\n  toggleBrushSize(e){\n    const previousBrushSize = document.querySelector('.brush-size-selected');\n    previousBrushSize.className = \"\";\n    e.target.className = 'brush-size-selected';\n    this.lineWidth = parseInt(e.target.dataset.brushsize);\n  }\n\n  toggleSymmetryChoice(e){\n    if (e.target.id === 'radial-order') {return;}\n    const previousSymmetry = document.querySelector('.symmetry-selected');\n    previousSymmetry.className = \"\";\n    e.target.className = 'symmetry-selected';\n    this.symDirection = e.target.dataset.symmetry;\n  }\n\n  changeRadialOrder(e){\n    this.radialOrder = parseInt(e.target.value);\n    const previousSymmetry = document.querySelector('.symmetry-selected');\n    previousSymmetry.className = \"\";\n    const radialSym = document.getElementById('radial-symmetry');\n    radialSym.className = 'symmetry-selected';\n    this.symDirection = 'RADIAL';\n  }\n\n  clearCanvas(e){\n    this.ctx.clearRect(0, 0, this.canvasElement.width, this.canvasElement.height);\n  }\n\n\n  determineDraw(e){\n    if (this.drawing){\n      this.setCoordinates(e, 'NEXT');\n\n      this.startCoordinates.forEach((coordPair, idx) => {\n        this.ctx.beginPath();\n        this.ctx.moveTo(coordPair[0], coordPair[1]);\n        this.ctx.lineTo(this.nextCoordinates[idx][0], this.nextCoordinates[idx][1]);\n        this.ctx.lineWidth = this.lineWidth;\n        this.ctx.strokeStyle = this.strokeStyle;\n        this.ctx.stroke();\n\n        this.startCoordinates[idx] = this.nextCoordinates[idx];\n      });\n      }\n    }\n\n  setDrawingParameters(action, e){\n    switch (action) {\n      case 'DOWN':\n        this.drawing = true;\n        this.setCoordinates(e, 'START');\n        break;\n      case 'UP':\n      case 'OUT':\n        this.drawing = false;\n        break;\n      }\n    }\n\n  setCoordinates(e, startOrNext){\n\n    let firstPair = [e.pageX - this.canvasLeftSide(), e.pageY - this.canvasTop()];\n    let symmetricPairSet;\n    switch(this.symDirection){\n      case 'HORIZONTAL':\n        ({ symmetricPairSet } = this.computeAxisSymPairs(e, 'HORIZONTAL'));\n        break;\n      case 'VERTICAL':\n        ({ symmetricPairSet } = this.computeAxisSymPairs(e, 'VERTICAL'));\n        break;\n      case 'RADIAL':\n        ({ symmetricPairSet } = this.computeRadialSymPairs(e));\n        break;\n    }\n    if (startOrNext === 'START'){\n      this.startCoordinates = [firstPair].concat(symmetricPairSet);\n    } else {\n      this.nextCoordinates = [firstPair].concat(symmetricPairSet);\n    }\n  }\n\n  computeAxisSymPairs(e, axis){\n    let symmetricPairX, symmetricPairY, symmetricPairSet;\n    switch (axis) {\n      case 'HORIZONTAL':\n        symmetricPairX = e.pageX - this.canvasLeftSide();\n        symmetricPairY = ((this.axisPoint[1] - (e.pageY - this.canvasTop())) * 2) + e.pageY - this.canvasTop();\n        symmetricPairSet = [[symmetricPairX, symmetricPairY]];\n        return { symmetricPairSet };\n      case 'VERTICAL':\n        symmetricPairX = ((this.axisPoint[0] - (e.pageX - this.canvasLeftSide())) * 2) + e.pageX - this.canvasLeftSide();\n        symmetricPairY = e.pageY - this.canvasTop();\n        symmetricPairSet = [[symmetricPairX, symmetricPairY]];\n        return { symmetricPairSet };\n      case 'DIAGONAL-RIGHT':\n        return;\n      case 'DIAGONAL-LEFT':\n        return;\n    }\n  }\n\n  computeRadialSymPairs(e){\n    const symmetricPairSet = [];\n\n    const xDistance = (e.pageX - this.canvasLeftSide() - this.axisPoint[0]);\n    const yDistance = -(e.pageY - this.canvasTop() - this.axisPoint[1]);\n    const pythagoreanSum = Math.pow(xDistance, 2) + Math.pow(yDistance, 2);\n    const radius =  Math.sqrt(pythagoreanSum);\n\n    let theta;\n    if (xDistance >= 0 && yDistance >= 0){\n      theta = Math.atan(yDistance / xDistance);\n    } else if (xDistance <= 0 && yDistance >= 0){\n      theta = Math.PI - Math.asin(yDistance / radius);\n    } else if (xDistance <= 0 && yDistance <= 0){\n      theta = Math.PI + Math.atan(yDistance / xDistance);\n    } else if (xDistance >= 0 && yDistance <= 0){\n      theta = (2 * Math.PI) - Math.acos(xDistance / radius);\n    }\n\n    const sliceSizeRadians = (2 * Math.PI) / this.radialOrder;\n\n    const thetaPrimes = [];\n    //note: thetaPrimes will not include theta since firstPair coordinates are\n    //      already known from the user's click\n    for (let i = 1; i <= this.radialOrder; i ++){\n      thetaPrimes.push(theta + (sliceSizeRadians * i));\n    }\n\n    thetaPrimes.forEach(angle => {\n      const canvasX = (radius * Math.cos(angle)) + this.axisPoint[0];\n      const canvasY = this.axisPoint[1] - (radius * Math.sin(angle));\n      symmetricPairSet.push([canvasX, canvasY]);\n    });\n    return { symmetricPairSet };\n  }\n\n\n}\n\nexport default Canvas;\n"],"sourceRoot":""}